/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD.
If you want to view the source, visit the pluginsâ€™ github repository.
*/

var A=Object.create;var b=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var J=Object.getPrototypeOf,q=Object.prototype.hasOwnProperty;var O=n=>b(n,"__esModule",{value:!0});var D=(n,t)=>{O(n);for(var e in t)b(n,e,{get:t[e],enumerable:!0})},W=(n,t,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of j(t))!q.call(n,i)&&i!=="default"&&b(n,i,{get:()=>t[i],enumerable:!(e=I(t,i))||e.enumerable});return n},k=n=>W(O(b(n!=null?A(J(n)):{},"default",n&&n.__esModule&&"default"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);var m=(n,t,e)=>new Promise((i,g)=>{var u=c=>{try{h(e.next(c))}catch(o){g(o)}},p=c=>{try{h(e.throw(c))}catch(o){g(o)}},h=c=>c.done?i(c.value):Promise.resolve(c.value).then(u,p);h((e=e.apply(n,t)).next())});D(exports,{default:()=>M});var E=k(require("obsidian"));var f=k(require("obsidian")),x=k(require("fs"));function y(n){let t=new Blob([n],{type:"text/javascript"}),e=URL.createObjectURL(t),i=new Worker(e);return URL.revokeObjectURL(e),i}function T(){return y(`self.onmessage=function(l){let c=l.data[0],i=l.data[1],s=c;c.forEach(n=>{let f=n.fileName,k=n.relativePath;s.forEach(t=>{f!==t.fileName&&t.links&&t.links.forEach(a=>{let e={};a.relativePath===k&&(e.fileName=t.fileName,e.link=a.link,e.relativePath=t.relativePath,a.cleanLink&&(e.cleanLink=a.cleanLink),a.displayText&&(e.displayText=a.displayText),i.push(e))})}),i.length>0&&(n.backlinks=i),i=[]}),self.postMessage(c)};
`)}function P(n,t){let e=[];for(let g of t)g.name.slice(-3)!==".md"&&e.push(g);return B(n,e)}function B(n,t){let e={};return t.length>0?Object.assign(e,{folders:n,nonMdFiles:t}):Object.assign(e,{folders:n}),e}function R(n){let t=[],e=[];for(let i of n)i instanceof f.TFolder?t.push({name:i.name,relativePath:i.path}):i instanceof f.TFile&&e.push({name:i.name,basename:i.basename,relativePath:i.path});return{folders:t,files:e}}var F=class{constructor(t,e){this.plugin=t,this.app=e}getAbsolutePath(t){let e;if(this.app.vault.adapter instanceof f.FileSystemAdapter)e=this.app.vault.adapter.getBasePath();else throw new Error("Cannot determine base path.");let i=`${this.app.vault.configDir}/plugins/metadata-extractor/${t}`;return`${e}/${i}`}getUniqueTags(t){let e=[],i=(0,f.getAllTags)(t);return i!==null&&(e=i),e=e.map(g=>g.slice(1).toLowerCase()),e=Array.from(new Set(e)),e}writeAllExceptMd(t){let e=this.plugin.settings.allExceptMdPath;this.plugin.settings.allExceptMdPath||(e=this.getAbsolutePath(t));let i=this.app.vault.getAllLoadedFiles(),{folders:g,files:u}=R(i),p=P(g,u);(0,x.writeFileSync)(e,JSON.stringify(p,null,2)),this.plugin.settings.consoleLog&&console.log("Metadata Extractor plugin: wrote the allExceptMd JSON file")}createCleanFrontmatter(t){delete t.aliases,delete t.tags;let{position:e}=t;return delete t.position,t.pos={offset:e.end.offset,end:e.end.line},t}writeTagsToJSON(t){let e=this.app.metadataCache.getTags();if(Object.keys(e).length===0){let l="There are no tags in your vault.";if(this.plugin.settings.consoleLog){console.log(l);return}else return}let i=this.plugin.settings.tagPath;this.plugin.settings.tagPath||(i=this.getAbsolutePath(t));let g=[];for(let l of this.app.vault.getMarkdownFiles()){let a,r=this.app.metadataCache.getFileCache(l);r!==null&&(a=r);let d=l.path,v=this.getUniqueTags(a);v.length!==0&&g.push({name:d,tags:v})}let p=g.map(l=>l.tags).reduce((l,a)=>l.concat(a.map(r=>r.toLowerCase()))),h=Array.from(new Set(p)),c=this.app.metadataCache.getTags(),o={};for(let[l,a]of Object.entries(c)){let r=l.slice(1).toLowerCase();o[r]=a}let s=[];for(let l of h){let a=[];for(let d of g)d.tags.contains(l)&&a.push(d.name);let r=o[l];s.push({tag:l,tagCount:r,relativePaths:a})}(0,x.writeFileSync)(i,JSON.stringify(s,null,2)),this.plugin.settings.consoleLog&&console.log("Metadata Extractor plugin: wrote the tagToFile JSON file")}writeCacheToJSON(t){let e=this.plugin.settings.metadataPath;this.plugin.settings.metadataPath||(e=this.getAbsolutePath(t));let i=[],g={};for(let[h,c]of Object.entries(this.app.vault.fileMap)){let o=h,s="";if(o.slice(-3)===".md"){if(o.includes("/")){let l=o.split("/").last();typeof l=="string"&&(s=l)}s=s.slice(0,-3).toLowerCase(),g[s]=o}}for(let h of this.app.vault.getMarkdownFiles()){let c=h.basename,o=h.path,s,l=this.app.metadataCache.getFileCache(h);if(l!==null)s=l;else{new f.Notice("Something with accessing the cache went wrong!");return}let a,r=[],d={};d.fileName=c,d.relativePath=o;let v=this.getUniqueTags(s);v!==null&&v.length>0&&(d.tags=v),s.frontmatter&&(a=(0,f.parseFrontMatterAliases)(s.frontmatter),a!==null&&a.length>0&&(d.aliases=a)),s.headings&&(s.headings.forEach(C=>{r.push({heading:C.heading,level:C.level})}),d.headings=r);let L=U(s,d,g,o,c);Object.assign(d,L),Object.keys(d).length>0&&i.push(d)}let u=[],p=T();p.postMessage([i,u]),p.onerror=h=>{new f.Notice("Something went wrong with the backlinks calculation.")},p.onmessage=h=>{i=h.data,(0,x.writeFileSync)(e,JSON.stringify(i,null,2)),this.plugin.settings.consoleLog&&console.log("Metadata Extractor plugin: wrote the metadata JSON file"),p.terminate()}}setWritingSchedule(t,e,i){if(this.plugin.settings.writingFrequency!=="0"){let u=parseInt(this.plugin.settings.writingFrequency)*6e4;window.clearInterval(this.plugin.intervalId1),this.plugin.intervalId1=void 0,this.plugin.intervalId1=window.setInterval(()=>this.writeTagsToJSON(t),u),this.plugin.registerInterval(this.plugin.intervalId1),window.clearInterval(this.plugin.intervalId2),this.plugin.intervalId2=void 0,this.plugin.intervalId2=window.setInterval(()=>this.writeCacheToJSON(e),u),this.plugin.registerInterval(this.plugin.intervalId2),window.clearInterval(this.plugin.intervalId3),this.plugin.intervalId3=void 0,this.plugin.intervalId3=window.setInterval(()=>this.writeAllExceptMd(i),u),this.plugin.registerInterval(this.plugin.intervalId3)}else this.plugin.settings.writingFrequency==="0"&&(window.clearInterval(this.plugin.intervalId1),window.clearInterval(this.plugin.intervalId2),window.clearInterval(this.plugin.intervalId3))}};function U(n,t,e,i,g){let u=[],p=[];h();function h(){let o=[],s=[];n.links&&(o=n.links),n.embeds&&(s=n.embeds.filter(l=>{let a=l.link;if(a.includes("/")&&(a=a.split("/").last(),a.includes("#")&&(a=a.replace(/#.+/g,""))),a.includes("#")&&(a=a.replace(/#.+/g,"")),e[a.toLowerCase()])return l})),p=o.concat(s),c()}function c(){for(let o of p){let s=o.link,l="",a={};typeof o.displayText!="undefined"&&(l=o.displayText),s.includes("/")&&(s=s.split("/").last());let r="";if(!s.includes("#"))r=e[s.toLowerCase()],a.link=s,r&&(a.relativePath=r),l!==s&&(a.displayText=l);else if(s.includes("#")&&s.charAt(0)!=="#"){let d=l,v=s.replace(/#.+/g,"");r=e[v.toLowerCase()],a.link=s,a.cleanLink=v,(!l.includes("#")||!l.includes(">"))&&(a.displayText=d),r&&(a.relativePath=r)}else s.charAt(0)==="#"&&(r=i,a.link=s,a.relativePath=r,a.cleanLink=g,s!==l&&(a.displayText=l));u.push(a)}u.length>0&&(t.links=u)}return t}var w=k(require("obsidian")),N={tagPath:"",metadataPath:"",allExceptMdPath:"",tagFile:"tags.json",metadataFile:"metadata.json",allExceptMdFile:"allExceptMd.json",writingFrequency:"0",writeFilesOnLaunch:!1,consoleLog:!1},S=class extends w.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Metadata Extractor Settings"}),new w.Setting(t).setName("File-write path for tags").setDesc("Where the tag-to-file-names JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/tags.json").setValue(this.plugin.settings.tagPath).onChange(i=>m(this,null,function*(){this.plugin.settings.tagPath=i,yield this.plugin.saveSettings()}))),new w.Setting(t).setName("File name of tag-to-file-names JSON").setDesc("Requires the .json extension. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("tags.json").setValue(this.plugin.settings.tagFile).onChange(i=>m(this,null,function*(){this.plugin.settings.tagFile=i,yield this.plugin.saveSettings()}))),new w.Setting(t).setName("File-write path for metadata").setDesc("Where the metadata JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/metadata.json").setValue(this.plugin.settings.metadataPath).onChange(i=>m(this,null,function*(){this.plugin.settings.metadataPath=i,yield this.plugin.saveSettings()}))),new w.Setting(t).setName("File name of metadata JSON").setDesc("Requires the .json extension; leave empty if setting above was changed. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("metadata.json").setValue(this.plugin.settings.metadataFile).onChange(i=>m(this,null,function*(){this.plugin.settings.metadataFile=i,yield this.plugin.saveSettings()}))),new w.Setting(t).setName("File-write path of allExceptMd JSON").setDesc("Where the allExceptMd JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/allExceptMd.json").setValue(this.plugin.settings.allExceptMdPath).onChange(i=>m(this,null,function*(){this.plugin.settings.allExceptMdPath=i,yield this.plugin.saveSettings()}))),new w.Setting(t).setName("File name of allExceptMd JSON").setDesc("Requires the .json extension; leave empty if setting above was changed. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("metadata.json").setValue(this.plugin.settings.allExceptMdFile).onChange(i=>m(this,null,function*(){this.plugin.settings.allExceptMdFile=i,yield this.plugin.saveSettings()}))),new w.Setting(t).setName("Configure frequency for writing the three JSON files").setDesc("The frequency has to be entered in minutes. Set it to 0 to disable the periodic writing.").addText(e=>e.setPlaceholder("120").setValue(this.plugin.settings.writingFrequency).onChange(i=>m(this,null,function*(){i===""?this.plugin.settings.writingFrequency="0":this.plugin.settings.writingFrequency=i,yield this.plugin.saveSettings(),this.plugin.methods.setWritingSchedule(this.plugin.settings.tagFile,this.plugin.settings.metadataFile,this.plugin.settings.allExceptMdFile)}))),new w.Setting(t).setName("Write JSON files automatically when Obsidian launches").setDesc("If enabled, the JSON files will be written each time Obsidian starts.").addToggle(e=>{e.setValue(this.plugin.settings.writeFilesOnLaunch).onChange(i=>{this.plugin.settings.writeFilesOnLaunch=i,this.plugin.saveSettings()})}),new w.Setting(t).setName("Show console logs").setDesc("Only enable this for debugging purposes.").addToggle(e=>{e.setValue(this.plugin.settings.consoleLog).onChange(i=>{this.plugin.settings.consoleLog=i,this.plugin.saveSettings()})})}};var M=class extends E.Plugin{constructor(){super(...arguments);this.intervalId1=void 0;this.intervalId2=void 0;this.intervalId3=void 0;this.methods=new F(this,this.app)}onload(){return m(this,null,function*(){console.log("loading Metadata Extractor plugin"),yield this.loadSettings(),this.addCommand({id:"write-tags-json",name:"Write JSON file with tags and associated file names to disk.",callback:()=>{this.methods.writeTagsToJSON(this.settings.tagFile)}}),this.addCommand({id:"write-metadata-json",name:"Write JSON file with metadata to disk.",callback:()=>{this.methods.writeCacheToJSON(this.settings.metadataFile)}}),this.addCommand({id:"write-allExceptMd-json",name:"Write JSON file with all folders and non-MD files to disk.",callback:()=>{this.methods.writeAllExceptMd(this.settings.allExceptMdFile)}}),this.addSettingTab(new S(this.app,this)),this.settings.writeFilesOnLaunch&&this.app.workspace.onLayoutReady(()=>{this.methods.writeTagsToJSON(this.settings.tagFile),this.methods.writeCacheToJSON(this.settings.metadataFile),this.methods.writeAllExceptMd(this.settings.allExceptMdFile)}),this.methods.setWritingSchedule(this.settings.tagFile,this.settings.metadataFile,this.settings.allExceptMdFile)})}onunload(){console.log("unloading Metadata Extractor plugin")}loadSettings(){return m(this,null,function*(){this.settings=Object.assign({},N,yield this.loadData())})}saveSettings(){return m(this,null,function*(){yield this.saveData(this.settings)})}};0&&(module.exports={});
